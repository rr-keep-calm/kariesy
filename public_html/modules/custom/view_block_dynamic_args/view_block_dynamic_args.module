<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Вмешиваемся в работу отображения блоков на вьюсах для передачи аргументов
 *
 * Implements hook_views_pre_view()
 */
function view_block_dynamic_args_views_pre_view($view, $display_id, &$args) {
  // Представление (блок доктора) на странице клиники
  if (strpos($display_id, 'block') !== 0) {
    return;
  }

  switch ($view->id()) {
    case 'recommended_services':
      if (\Drupal::routeMatch()
          ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
          ->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        $vacabulary_id = $term->getVocabularyId();
        if ($vacabulary_id == 'service') {
          $args[0] = $tid;
        }
      }
      break;
    case 'doctors':
      if ($display_id === 'block_3') {
        if (
          \Drupal::routeMatch()
            ->getRouteName() == 'entity.taxonomy_term.canonical'
          && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')
        ) {
          $term = Term::load($tid);
          $vacabulary_id = $term->getVocabularyId();
          if ($vacabulary_id == 'service') {
            $args[0] = $term->get('field_service_type')
              ->getValue()[0]['target_id'];
          }
        }
        if (strpos(\Drupal::routeMatch()
            ->getRouteName(), 'view.services_page') === 0) {
          $router = \Drupal::routeMatch()->getRouteName();
          $parent_view = \Drupal\views\Views::getView('services_page');
          $router_parts = explode('.', $router);
          $parent_display = end($router_parts);
          $parent_view->setDisplay($parent_display);
          $parent_display_params = $parent_view->getDisplay();
          $args[0] = reset($parent_display_params->display['display_options']['filters']['field_service_type_target_id']['value']);
        }
        if (\Drupal::routeMatch()->getRouteName() === 'entity.node.canonical') {
          $node = \Drupal::routeMatch()->getParameter('node');
          if ($node->bundle() === 'stock') {
            $args[0] = $node->get('field_service_type2')
              ->getValue()[0]['target_id'];
          }
        }
      }
      break;
    case 'reviews':
      if ($display_id !== 'block_2' && $display_id !== 'block_3') {
        return;
      }
      if (\Drupal::routeMatch()
          ->getRouteName() == 'entity.taxonomy_term.canonical' ||
        strpos(\Drupal::routeMatch()
          ->getRouteName(), 'view.services_page') === 0 ||
        \Drupal::routeMatch()->getRouteName() == 'entity.node.canonical'
      ) {
        $tid_argument = 'all';
        $nids_argument = 'all';
        $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
        $nid = \Drupal::routeMatch()->getRawParameter('node');
        // Если не удалось  определить идентификатор термина, то мы на странице
        // типа услуги или акции, а значит формируем аргумент множественного
        // типа
        if (!$tid) {
          if (!$nid) {
            $router = \Drupal::routeMatch()->getRouteName();
            $parent_view = Views::getView('services_page');
            $router_parts = explode('.', $router);
            $parent_display = end($router_parts);
            $parent_view->setDisplay($parent_display);
            $parent_display_params = $parent_view->getDisplay();
            $parent_tid = reset($parent_display_params->display['display_options']['filters']['field_service_type_target_id']['value']);
            if (!$parent_tid || $parent_display_params->display['id'] != $parent_display) {
              return;
            }
          } else { // Блок отзывов для страницы акции
            $stock_node = Node::load($nid);
            $service_type = $stock_node->get('field_service_type2')->getValue();
            if (!$service_type) {
              return;
            }
            $parent_tid = $service_type[0]['target_id'];
          }
          $tids = \Drupal::entityTypeManager()
            ->getStorage('taxonomy_term')
            ->loadByProperties(['field_service_type' => $parent_tid]);
          if ($tids) {
            $tid_argument = implode('+', array_keys($tids));
            $tids = array_keys($tids);
          }
        }
        else {
          $term = Term::load($tid);
          $vacabulary_id = $term->getVocabularyId();
          if ($vacabulary_id != 'service') {
            return;
          }
          $tids = [$tid];
        }
        // Смотрим сколько отзывов прикреплено к данной услуге
        if (isset($tids) && $tids) {
          $reviews = \Drupal::entityQuery('node')
            ->condition('type', 'review')
            ->condition('field_service', $tids, 'IN')
            ->condition('status', 1)
            ->execute();
          if (count($reviews) >= 3) {
            $tid_argument = $tid ?? $tid_argument;
          }
          else {
            // Получаем типы услуг для услуг, к которым не хватает отзывов
            $service_type_tids = [];
            foreach ($tids as $tid) {
              $term = Term::load($tid);
              $service_type_tids[] = $term->get('field_service_type')->target_id;
            }
            $service_type_tids = array_filter($service_type_tids);
            $nids = $reviews;
            $query = \Drupal::database()
              ->select('node__field_list_service_type', 'nflst');
            $query->join('node_field_data', 'nfd', 'nflst.entity_id = nfd.nid');
            $query->fields('nflst', ['entity_id']);

            // Здесь будет ошибка в условиях, но такое возможно только если
            // услуга не отнесена к какому-то типу услуги и каким-то образом мы
            // попали на страницу этой услуги, что маловероятно, поэтому
            // проверки никакой нет
            if ( $service_type_tids) {
              $query->condition('nflst.field_list_service_type_target_id', $service_type_tids, 'IN');
            }

            $query->condition('nfd.status', 1);
            $query->range(0, 3 - count($nids));
            $query->orderRandom();

            if ($nids) {
              foreach ($nids as $nid) {
                $query->condition('nflst.entity_id', $nid, '!=');
              }
            }

            $results = $query->distinct()->execute()->fetchCol();
            $nids += $results;
            $nids_argument = implode('+', $nids);
            $tid_argument = 'all';
          }
        }
      }
      $args[0] = $tid_argument;
      $args[1] = $nids_argument;
      break;
    case 'clinics':
      if ($display_id === 'block_3' && \Drupal::routeMatch()
          ->getRouteName() == 'entity.node.canonical') {
        $args[0] = \Drupal::routeMatch()->getRawParameter('node');
      }
      break;
  }
}

/**
 * Наверняка исключает из случайных услуг просматриваемую
 *
 * @param \Drupal\views\ViewExecutable $view
 * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
 */
function view_block_dynamic_args_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  if ($view->id() == 'recommended_services' && $view->current_display == 'block_1') {
    if (\Drupal::routeMatch()
        ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
        ->getRawParameter('taxonomy_term')) {
      $term = Term::load($tid);
      $vacabulary_id = $term->getVocabularyId();
      if ($vacabulary_id == 'service') {
        $query->addWhere(
          count($query->where),
          'taxonomy_term_field_data.tid',
          $tid,
          '!='
        );
      }
    }
  }
}
