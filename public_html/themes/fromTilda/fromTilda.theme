<?php

use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Transliteration\PhpTransliteration;
use Drupal\views\Views;

function fromTilda_preprocess_html(&$variables)
{
  $variables['#attached']['drupalSettings']['path']['themeUrl'] = \Drupal::theme()->getActiveTheme()->getPath();
  $title_parts = explode('|||', $variables['head_title']['title']);
  if (strpos($variables['head_title']['title'], 'Цены на услуги в стоматологии Кариесу.нет') === 0) {
    $title_parts[0] = str_replace(' | Кариесу.нет', '', $title_parts[0]);
  }
  $variables['head_title']['title'] = end($title_parts);
  if (!isset($_GET['page']) || !$_GET['page'] || (int)$_GET['page'] === 0) {
    return;
  }

  $current_url = Url::fromRoute('<current>');
  $path = $current_url->toString();
  if ($path === '/feedback') {
    $page = ++$_GET['page'];
    $variables['head_title']['title'] .= ' — страница ' . $page;
  }
}

/**
 * Preprocess function for breadcrumb.html.twig.
 */
function fromTilda_preprocess_breadcrumb(&$variables) {
  $is_service_term = FALSE;
  $serviceTypeBread = [];
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    // Получаем тип услуги для вставик его в хлебные крошки
    if ($vacabulary_id == 'service') {
      $serviceTypesUrl = [
        3 => '/uslugi/lechenie-zubov',
        4 => '/uslugi/implantatsiya-zubov',
        8 => '/uslugi/protezirovanie-zubov',
        9 => '/uslugi/hirurgiya',
        10 => '/uslugi/orthodontia',
        11 => '/uslugi/gigiena',
        12 => '/uslugi/detskaya-stomatologiya',
        157 => '/uslugi/parodontologiya',
        158 => '/uslugi/diagnostika'
      ];
      $serviceType = $term->get('field_service_type')->getValue();
      if ($serviceType) {
        $serviceTypeTerm = Term::load($serviceType[0]['target_id']);
        $serviceTypeBread[] = ['text' => $serviceTypeTerm->getName(), 'url' => $serviceTypesUrl[$serviceTypeTerm->get('tid')->value]];
      }
      $is_service_term = TRUE;
    }
  }
  if ($variables['breadcrumb']) {
    if ($is_service_term) {
      $variables['breadcrumb'] = array_merge(
        array_slice($variables['breadcrumb'], 0, 1),
        [['text' => 'Услуги', 'url' => '/uslugi']],
        $serviceTypeBread,
        array_slice($variables['breadcrumb'], 1)
      );
    }
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')
      ->getTitle($request, $route_match->getRouteObject());

    if ($page_title && \Drupal::routeMatch()->getRouteName() != 'price_page.price_page') {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
      ];
    }
  }
  $variables['#cache']['contexts'][] = 'url';
}

function fromTilda_theme_suggestions_page_alter(&$suggestions, &$vars) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Определяем шаблоны для страниц терминов таксономии на основании названия
  // термина
  if ($route_name == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'page__taxonomy__' . $vacabulary_id;
  }
  // Определяем шаблон для страницы цен
  if ($route_name == 'price_page.price_page') {
    $suggestions[] = 'page__price_page';
  }
  // Определяем шаблон для страницы поиска
  if ($route_name == 'custom_yandex_search.search') {
    $suggestions[] = 'page__search';
  }
  // Определяем отдельный шаблон для страницы списка услуг
  if (strpos($route_name, 'view.services_page') === 0) {
    $suggestions[] = 'page__views__services_page';
  }
  // Определяем отдельные шаблон для страниц типов материалов
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
  // Определяем отдельный шаблон для страницы списка вопросов-ответов
  if ($route_name == 'view.vopros_otvet.page_1') {
    $suggestions[] = 'page__views__question';
  }

  $request = \Drupal::request();
  if ($exception = $request->attributes->get('exception')) {
    $status_code = $exception->getStatusCode();
    if ($status_code == 404) {
      $suggestions[] = 'page__404';
    }
  }
}

function fromTilda_theme_suggestions_taxonomy_term_alter(&$suggestions, &$vars, $hook) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'taxonomy_term__' . $vacabulary_id;
    if ($vacabulary_id == 'service') {
      // Получаем список вложенных услуг
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadChildren($term->id());
      $childTerms = array();
      foreach($terms as $childTerm) {
        $childTerms[] = $childTerm->get('tid')->value;
      }

      $childTerms = implode(',', $childTerms);

      // Получаем блок со вложенными услугами
      $view = \Drupal\views\Views::getView('sub_service');
      $view->setDisplay('block_1');
      $view->setArguments(array($childTerms));
      $render = $view->render();
      if ($render['#rows'] && count($render['#rows']) > 0) {
        $vars['sub_services'] = \Drupal::service('renderer')->render($render);
      }

      // Получаем блок с ценами на услуги заболеваний
      $view = \Drupal\views\Views::getView('blok_cen_na_stranice_uslugi');
      $view->setDisplay('block_1');
      $view->setArguments(array($term->id()));
      $render = $view->render();
      if (count($render['#rows']) > 0) {
        $vars['service_price'] = \Drupal::service('renderer')->render($render);

        // Формируем заключительную часть ссылки на нужную страницу прайса
        $service_type = $term->get('field_service_type')->getValue();
        if (isset($service_type[0]) && isset($service_type[0]['target_id'])) {
          $service_type = Term::load($service_type[0]['target_id']);
          $service_type_name = $service_type->name->value;
          $translitiration = new PhpTransliteration();
          $last_part_url = strtolower(str_replace(' ', '_', $translitiration->transliterate($service_type_name, 'en', '_')));
          $vars['service_price_last_part_url'] = $last_part_url;
        }
      }
    }
  }
}

/**
 * Preprocess function for page*.html.twig.
 */
function fromTilda_preprocess_page(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->getType() == 'doktor') {
      $doctorNidForReviews = $node->id();
      $description = '';
      $specializations = $node->get('field_specialization')->getValue();
      $specializations = array_map(function ($v) {
        return $v['value'];
      }, $specializations);
      $description .= implode(', ', $specializations);
      if (!$node->get('field_experience_since_what_year')->isEmpty()) {
        $description .= ', клинический стаж с ';
        $description .= $node->get('field_experience_since_what_year')
          ->getValue()[0]['value'];
        $description .= ' года';
      }
      $description = trim($description);
      $descriptionParts = explode(' ', $description);
      $descriptionParts[0] = mb_convert_case($descriptionParts[0], MB_CASE_TITLE, 'UTF-8');
      $variables['doctorDescription']['#markup'] = implode(' ', $descriptionParts);
      $url = '';
      if (!$node->field_foto->isEmpty()) {
        $uri = $node->field_foto->entity->getFileUri();
        $url = file_create_url($uri);
      }
      $variables['doctorPhotoUrl']['#markup'] = $url;
      // Доктор по умолчанию на странице доктора
      $variables['defaultDoctorForFeedback'] = $variables['defaultDoctor'] = $node->id();
      $variables['doctorName'] = $node->get('title')->getValue()[0]['value'];
    } elseif ($node->getType() == 'clinic') {
      $variables['defaultClinic'] = $clinicNidForReviews = $node->id();
    }
  }

  $viewIdReviews = \Drupal::routeMatch()->getParameter('view_id');
  $currentPath = \Drupal::service('path.current')->getPath();
  if ((isset($doctorNidForReviews) || isset($clinicNidForReviews)) ||
    ($viewIdReviews === 'reviews' && $currentPath === '/feedback')
  ) {

    // На странице доктора, клиники и отзывов нужен список всех клиник для формы отзыва
    $variables['clinics'] = [];
    $clinicNids = \Drupal::entityQuery('node')
      ->condition('type', 'clinic')
      ->execute();
    $clinicNodes = \Drupal\node\Entity\Node::loadMultiple($clinicNids);
    foreach ($clinicNodes as $clinicNode) {
      $variables['clinics'][$clinicNode->id()] = $clinicNode->getTitle();
    }

    if (isset($doctorNidForReviews) || isset($clinicNidForReviews)) {
      // Получаем блок с отзывами для доктора или клиники
      // Получаем идентификаторы отзывов относящихся к просматриваемому доктору
      // или клинике
      $reviewsNids = \Drupal::entityQuery('node')
        ->condition('type', 'review');
      if (isset($doctorNidForReviews)) {
        $reviewsNids->condition('field_doctor', $doctorNidForReviews);
        $variables['current_nid'] = $doctorNidForReviews;
      }
      elseif (isset($clinicNidForReviews)) {
        $reviewsNids->condition('field_clinic', $clinicNidForReviews);
        $variables['current_nid'] = $clinicNidForReviews;
      }
      $reviewsNids = $reviewsNids->execute();
      $viewReviews = \Drupal\views\Views::getView('reviews');
      $viewReviews->setDisplay('block_1');
      $viewReviews->setArguments([implode('+', $reviewsNids)]);
      $renderReviews = $viewReviews->render();
      if (count($renderReviews['#rows']) > 0) {
        $variables['reviews'] = \Drupal::service('renderer')
          ->render($renderReviews);
      }
      $variables['reviews_count'] = count($reviewsNids);
    }
  }

  // Если обращение идёт к странице услуги, то запоминаем тип услуги для
  // правильного отображения на форме записи на приём
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    if ($vacabulary_id == 'service') {
      $defaultServiceForForm = $term->get('field_service_type')->getValue();
      if ($defaultServiceForForm) {
        $variables['defaultServiceForForm'] = Term::load($defaultServiceForForm[0]['target_id'])->name->value;
      }
      $variables['hideFreeConsultBlock'] = (bool)$term->get('field_hide_free_consult_block')->getValue()[0]['value'];
    }
  }
  if (strpos(\Drupal::routeMatch()->getRouteName(), 'view.services_page') === 0) {
    $router = \Drupal::routeMatch()->getRouteName();
    $parent_view = \Drupal\views\Views::getView('services_page');
    $router_parts = explode('.', $router);
    $parent_display = end($router_parts);
    $parent_view->setDisplay($parent_display);
    $parent_display_params = $parent_view->getDisplay();
    $parent_tid = reset($parent_display_params->display['display_options']['filters']['field_service_type_target_id']['value']);
    $term = Term::load($parent_tid);
    if ($term) {
      $variables['hideFreeConsultBlock'] = (bool) $term->get('field_hide_free_consult_block')
        ->getValue()[0]['value'];
    }
  }
  if ($viewIdReviews === 'services_page' && preg_match('/view.services_page.(page_\d)/', \Drupal::routeMatch()->getRouteName(), $matches)) {
    $routeObject = \Drupal::routeMatch()->getRouteObject();
    $viewsId = $routeObject->getDefault('view_id');
    $view = Views::getView($viewsId);
    $viewsDisplay = $view->storage->getDisplay($matches[1]);
    $serviseTypeId = reset($viewsDisplay['display_options']['filters']['field_service_type_target_id']['value']);
    $term = Term::load($serviseTypeId);
    $variables['defaultServiceForForm'] = $term->name->value;
  }

  // Получаем список всех докторов.
  // Попутно сохраняя список оказываемых доктором услуг.
  $nids = \Drupal::entityQuery('node')
    ->condition('type','doktor')
    ->condition('status', 1)
    ->execute();
  $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
  $variables['doctors'] = [];
  $variables['serviceTypesAll']['i_do_not_know']['name'] = 'Не знаю';
  foreach ($doctorsNodes as $node) {
    $doctorNid = $node->id();
    $serviceTypes = $node->get('field_service_type')->getValue();
    foreach ($serviceTypes as $serviceType) {
      $serviceTypeTerm = Term::load($serviceType['target_id']);
      $variables['serviceTypesAll'][$serviceType['target_id']]['name'] = $serviceTypeTerm->name->value;
      $variables['serviceTypesAll'][$serviceType['target_id']]['doctors'][] = ['name' => $node->getTitle(), 'nid' => $doctorNid];
    }
    $variables['serviceTypesAll']['i_do_not_know']['doctors'][] = ['name' => $node->getTitle(), 'nid' => $doctorNid];
    $variables['doctors'][$doctorNid] = $node->getTitle();

    // Сохраняем клиники в которых работает доктор (используется на форме отзывов для актуализации клиник)
    $schedule = $node->get('field_schedule')->getValue();
    if (isset($schedule[0]['value']) && $schedule[0]['value']) {
      $schedule = json_decode($schedule[0]['value'], TRUE);
    }
    if (!$schedule || !is_array($schedule)) {
      continue;
    }
    foreach ($schedule as $value) {
      foreach ($value as $key => $clinik) {
        if ($key == 'start' || $key == 'end' || !$clinik) {
          continue;
        }
        $variables['doctors_clinic'][$doctorNid][(int)$clinik] = (int)$clinik;
        // Устанавливаем доктора по умолчанию при условии что он ещё не установлен и мы находимся на странцие клиники и в этой клинике работают доктора
        if (!isset($variables['defaultDoctorForFeedback']) && isset($clinicNidForReviews) && $clinicNidForReviews == $clinik) {
          $variables['defaultDoctorForFeedback'] = $doctorNid;
        }
      }
    }
  }
  // Если так и не установили доктора по умолчанию то берём первого доктора и назначаем его поумолчанию
  if (!isset($variables['defaultDoctorForFeedback'])) {
    $doctorsNids = array_keys($variables['doctors']);
    $variables['defaultDoctorForFeedback'] = reset($doctorsNids);
  }

  // Если обращаются к странице со списком клиник, то собираем информацию о центральной клинике
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id === 'clinics') {
    $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties(['field_central_clinic' => 1]);
    if ($nodes) {
      $variables['centralClinic'] = [];
      $node = current($nodes);
      $variables['centralClinic']['title'] = $node->getTitle();
      $variables['centralClinic']['metro'] = $node->get('field_metro')->getValue();

      $city = $node->get('field_city')->getValue();
      if ($city) {
        $cityTerm = Term::load($city[0]['target_id']);
        $variables['centralClinic']['city'] = $cityTerm->name->value;
      }

      $variables['centralClinic']['address'] = $node->get('field_address')->getValue();

      $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()]);
      $variables['centralClinic']['url'] = $url->toString();

      if (!$node->field_image->isEmpty()) {
        $uri = $node->field_image->entity->getFileUri();
        $variables['centralClinic']['img'] = file_create_url($uri);
      }
    }
  }

  // Для главной страницы
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    // Получаем реульное количество опубликованных отзывов
    $nids = \Drupal::entityQuery('node')
      ->condition('type','review')
      ->condition('status', 1)
      ->execute();
    $variables['reviews_count'] = count($nids);

    // Получаем количество лет работы от 15 октября 1998 года
    $startDate = new DateTime('1998-10-15 00:00:00', new DateTimeZone('Europe/Moscow'));
    $interval = $startDate->diff(new DateTime(), true);
    $variables['years_of_successful_work'] = $interval->y + 1;
  }
}

function fromTilda_preprocess_node(&$variables){
  if ($variables['node']->getType() == 'doktor') {
    // Распаковываем данные по графику работы для отображения на сайте
    $schedule = $variables['node']->get('field_schedule')->getValue();
    if (isset($schedule[0]['value']) && $schedule[0]['value']) {
      $schedule = json_decode($schedule[0]['value'], TRUE);
    }
    if ($schedule && is_array($schedule)) {
      array_walk($schedule, function(&$value) {
        array_walk($value, function(&$clinik, $key){
          if ($key != 'start' && $key != 'end' && $clinik) {
            // Составляем ссылки на страницы клиник
            $nodeClinic = \Drupal\node\Entity\Node::load($clinik);
            $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $nodeClinic->id()]);
            $clinik = ['name' => $nodeClinic->getTitle(), 'url' => $url->toString()];
          }
        });
      });
      $variables['schedule'] = $schedule;
    }
  }
  // Если обращаются к странице со отзывов,
  // то получаем всех не активных докторов для вывода в отзыве
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id === 'reviews' && isset($variables['view']) && $variables['view']->current_display == 'page_1') {
    // Получаем список всех докторов.
    // Попутно сохраняя список оказываемых доктором услуг.
    $nids = \Drupal::entityQuery('node')
      ->condition('type','doktor')
      ->condition('status', 0)
      ->execute();
    $unpublishedDoctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
    $variables['unpublishedDoctors'] = [];
    foreach ($unpublishedDoctorsNodes as $node) {
      $variables['unpublishedDoctors'][$node->id()] = $node->getTitle();
    }
  }

  // Если отрисовывается отзыв, то получаем дополнительную информацию
  if ($variables['node']->getType() == 'review') {
    $review_id = $variables['node']->get('field_review_id')->getValue();
    if ($review_id && $review_id[0]['value']) {
      $clinik_nid = $variables['node']->get('field_clinic')->getValue();
      if ($clinik_nid) {
        $clinik_node = \Drupal\node\Entity\Node::load($clinik_nid[0]['target_id']);
        $variables['clinik_yandex_map_id'] = $clinik_node->get('field_yandex_map_business_id')
          ->getValue()[0]['value'];
      }
    }
  }
}

function fromTilda_preprocess_views_view(&$variables){
  $view = $variables['view'];

  // Если обращаются к странице со списком докторов,
  // то собираем все специализации к которым был отнесён хотя бы один доктор,
  // а так же все клиники которые были указаны в графиках работы
  if ($view->storage->id() === 'doctors' && $view->current_display == 'page_1') {
    $nids = \Drupal::entityQuery('node')
      ->condition('type','doktor')
      ->condition('status', 1)
      ->execute();
    $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
    $translitiration = new PhpTransliteration();
    $allSpecializations = [];
    $allClinics = [];
    foreach ($doctorsNodes as $node) {
      $specializations = $node->get('field_specialization')->getValue();
      foreach ($specializations as $specialization) {
        $key = str_replace(' ', '_', $translitiration->transliterate($specialization['value'], 'en', '_'));
        $allSpecializations[$key] = $specialization['value'];
      }
      $schedule = $node->get('field_schedule')->getValue();
      if (isset($schedule[0]['value']) && $schedule[0]['value']) {
        $schedule = json_decode($schedule[0]['value'], TRUE);
      }
      if ($schedule && is_array($schedule)) {
        array_walk($schedule, function(&$value) use($translitiration, &$allClinics) {
          array_walk($value, function(&$clinik, $key) use($translitiration, &$allClinics){
            if ($key != 'start' && $key != 'end' && $clinik) {
              // Составляем ссылки на страницы клиник
              $nodeClinic = \Drupal\node\Entity\Node::load($clinik);
              $name = $nodeClinic->getTitle();
              $clinicKey = str_replace(' ', '_', $translitiration->transliterate($name, 'en', '_'));
              $allClinics[$clinicKey] = $name;
            }
          });
        });
      }
    }
    $variables['allSpecializations'] = $allSpecializations;
    $variables['allClinics'] = $allClinics;
    $variables['getVars'] = $_GET;
  }

  // Если обращаются к странице со списком отзывов,
  // то собираем всех докторов и все клиники, которые встречаются в отзывах
  // хотябы один раз
  if ($view->storage->id() === 'reviews' && $view->current_display == 'page_1') {
    $nids = \Drupal::entityQuery('node')
      ->condition('type','review')
      ->condition('status', 1)
      ->execute();
    $reviewNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
    $allDoctors = [];
    $allClinics = [];
    foreach ($reviewNodes as $review) {
      $clinic = $review->get('field_clinic')->getValue();
      if ($clinic) {
        $allClinics[] = $clinic[0]['target_id'];
      }
      $doctor = $review->get('field_doctor')->getValue();
      if ($doctor) {
        $allDoctors[] = $doctor[0]['target_id'];
      }
    }

    $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($allDoctors);
    $allDoctors = [];
    foreach ($doctorsNodes as $doctor) {
      $allDoctors[$doctor->id()] = $doctor->getTitle();
    }

    $clinicsNodes =  \Drupal\node\Entity\Node::loadMultiple($allClinics);
    $allClinics = [];
    foreach ($clinicsNodes as $clinic) {
      $allClinics[$clinic->id()] = $clinic->getTitle();
    }

    $variables['allDoctors'] = $allDoctors;
    $variables['allClinics'] = $allClinics;
    $variables['getVars'] = $_GET;
  }

  // Отменяем кэширование на странице где расположен блок "Рекомендуемые услуги"
  if ($view->storage->id() === 'recommended_services' && $view->current_display == 'block_1') {
    \Drupal::service('page_cache_kill_switch')->trigger();
  }
}

/**
 * Implements hook_preprocess().
 */
function fromTilda_preprocess_block(&$variables) {
  if ($variables['configuration']['id'] === 'views_block:reviews-block_2') {
    // Получаем список всех докторов.
    $nids = \Drupal::entityQuery('node')
      ->condition('type','doktor')
      ->condition('status', 1)
      ->execute();
    $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
    $variables['doctors'] = [];
    foreach ($doctorsNodes as $node) {
      $variables['doctors'][$node->id()] = $node->getTitle();
    }

    $variables['clinics'] = [];
    $clinicNids = \Drupal::entityQuery('node')
      ->condition('type', 'clinic')
      ->condition('status', 1)
      ->execute();
    $clinicNodes = \Drupal\node\Entity\Node::loadMultiple($clinicNids);
    foreach ($clinicNodes as $clinicNode) {
      $variables['clinics'][$clinicNode->id()] = $clinicNode->getTitle();
    }
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function fromTilda_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $pieces = [
    $variables['element']['#type'],
    $variables['element']['#name'],
    $variables['element']['#display_id'],
  ];
  $suggestions[] = 'container__' . implode('_', $pieces);
}

/**
 * Preprocess function for taxonomy-term*.html.twig.
 */
function fromTilda_preprocess_taxonomy_term(&$variables) {
  if ($variables['name']['#bundle'] == 'service' && $variables['view_mode'] == 'services_list') {
    $term = $variables['term'];
    // Поулчаем вложенные услуги при наличии
    $aliasManager = \Drupal::service('path.alias_manager');
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadChildren($term->id());
    $variables['child'] = [];
    foreach($terms as $subTerm) {
      $subContent['href'] = $aliasManager->getAliasByPath('/taxonomy/term/' . $subTerm->id());
      $subContent['name'] = $subTerm->get('name')->value;
      $subContent['pikt'] = '';
      if (!$subTerm->get('field_piktogramma')->isEmpty()) {
        $subContent['pikt'] = file_create_url($subTerm->field_piktogramma->entity->getFileUri());
      }
      $variables['child'][$subTerm->get('weight')->value] = $subContent;
    }
    if ($variables['child']) {
      ksort($variables['child']);
    }
    //  Смотрим нужно ли брать данные из другого термина для отображения
    $tid_for_data_import = $term->get('field_get_data_from_service')->target_id;
    if ($tid_for_data_import) {
      $term_for_data_import = Term::load($tid_for_data_import);
      foreach (array_keys($variables['content']) as $field_name) {
        if (in_array($field_name, ['field_do_not_show_in_general', 'field_service_type'])) {
          continue;
        }
        $current_term_field_value = $term->get($field_name)->getValue();
        $import_term_field_value = $term_for_data_import->get($field_name)->getValue();
        if ($current_term_field_value == $import_term_field_value || $current_term_field_value) {
          continue;
        }
        if (isset($term_for_data_import->$field_name)) {
          $variables['content'][$field_name] = $term_for_data_import->$field_name->view();
        }
      }
      $variables['url'] = $term_for_data_import->toUrl();
    }
  }
}

/**
 * Preprocess function for paragraph*.html.twig.
 */
function fromTilda_preprocess_paragraph(&$variables) {
  if (isset($variables['content']['field_doctor'])) {
    $doctorId = $variables['paragraph']->get('field_doctor')
      ->getValue()[0]['target_id'];
    $node = \Drupal\node\Entity\Node::load($doctorId);
    $specializations = $node->get('field_specialization')->getValue();
    $specializations = array_map(function ($v) {
      return $v['value'];
    }, $specializations);
    $variables['specializations'] = implode(', ', $specializations);
  }

  if (isset($variables['content']['field_answer'])) {
    $variables['q_a_url'] = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $variables['paragraph']->getParentEntity()->id()]);
  }
}
