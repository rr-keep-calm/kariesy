<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Transliteration\PhpTransliteration;

function fromTilda_preprocess_html(&$variables)
{
  $variables['#attached']['drupalSettings']['path']['themeUrl'] = \Drupal::theme()->getActiveTheme()->getPath();
}

/**
 * Preprocess function for breadcrumb.html.twig.
 */
function fromTilda_preprocess_breadcrumb(&$variables) {
  $is_service_term = FALSE;
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    // Попытка получить список типов заболевания для страницы услуги
    if ($vacabulary_id == 'service') {
      $is_service_term = TRUE;
    }
  }
  if ($variables['breadcrumb']) {
    if ($is_service_term) {
      $variables['breadcrumb'] = array_merge(
        array_slice($variables['breadcrumb'], 0, 1),
        [['text' => 'Услуги', 'url' => '/price']],
        array_slice($variables['breadcrumb'], 1)
      );
    }
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')
      ->getTitle($request, $route_match->getRouteObject());

    if ($page_title) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
      ];
    }
  }
  $variables['#cache']['contexts'][] = 'url';
}

function fromTilda_theme_suggestions_page_alter(&$suggestions, &$vars) {
  // Определяем шаблоны для страниц терминов таксономии на основании названия
  // термина
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'page__taxonomy__' . $vacabulary_id;
  }
  // Определяем шаблон для страницы цен
  if (\Drupal::routeMatch()->getRouteName() == 'price_page.price_page') {
    $suggestions[] = 'page__price_page';
  }
  // Определяем отдельный шаблон для страницы списка услуг
  if (\Drupal::routeMatch()->getRouteName() == 'view.services_page.page_1') {
    $suggestions[] = 'page__views__services_page';
  }
}

function fromTilda_theme_suggestions_taxonomy_term_alter(&$suggestions, &$vars, $hook) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'taxonomy_term__' . $vacabulary_id;
    if ($vacabulary_id == 'service') {
      // Получаем список вложенных услуг
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadChildren($term->id());
      $childTerms = array();
      foreach($terms as $childTerm) {
        $childTerms[] = array($childTerm->get('tid')->value,
          $childTerm->get('weight')->value);
      }

      // Сортируем вложенные услуги в порядке веса в словаре
      usort($childTerms, function($a, $b){
        return $a[1] <=> $b[1];
      });

      $childTermsTemp = array();
      foreach ($childTerms as &$childTerm) {
        $childTermsTemp[] = $childTerm[0];
      }

      $childTerms = implode(',', $childTermsTemp);

      // Получаем блок со вложенными услугами
      $view = \Drupal\views\Views::getView('sub_service');
      $view->setDisplay('block_1');
      $view->setArguments(array($childTerms));
      $render = $view->render();
      if (count($render['#rows']) > 0) {
        $vars['sub_services'] = \Drupal::service('renderer')->render($render);
      }

      // Получаем блок с ценами на услуги заболеваний
      $view = \Drupal\views\Views::getView('blok_cen_na_stranice_uslugi');
      $view->setDisplay('block_1');
      $view->setArguments(array($term->id()));
      $render = $view->render();
      if (count($render['#rows']) > 0) {
        $vars['service_price'] = \Drupal::service('renderer')->render($render);

        // Формируем якорь для ссылки на страницу прайса
        $service_type = $term->get('field_service_type')->getValue();
        if (isset($service_type[0]) && isset($service_type[0]['target_id'])) {
          $service_type = Term::load($service_type[0]['target_id']);
          $service_type_name = $service_type->name->value;
          $translitiration = new PhpTransliteration();
          $vars['service_price_anchor'] = $translitiration->transliterate($service_type_name, 'en', '_');
        }
      }
    }
  }
}
