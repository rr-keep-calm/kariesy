<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Transliteration\PhpTransliteration;

function fromTilda_preprocess_html(&$variables)
{
  $variables['#attached']['drupalSettings']['path']['themeUrl'] = \Drupal::theme()->getActiveTheme()->getPath();
}

/**
 * Preprocess function for breadcrumb.html.twig.
 */
function fromTilda_preprocess_breadcrumb(&$variables) {
  $is_service_term = FALSE;
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    // Попытка получить список типов заболевания для страницы услуги
    if ($vacabulary_id == 'service') {
      $is_service_term = TRUE;
    }
  }
  if ($variables['breadcrumb']) {
    if ($is_service_term) {
      $variables['breadcrumb'] = array_merge(
        array_slice($variables['breadcrumb'], 0, 1),
        [['text' => 'Услуги', 'url' => '/price']],
        array_slice($variables['breadcrumb'], 1)
      );
    }
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')
      ->getTitle($request, $route_match->getRouteObject());

    if ($page_title) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
      ];
    }
  }
  $variables['#cache']['contexts'][] = 'url';
}

function fromTilda_theme_suggestions_page_alter(&$suggestions, &$vars) {
  // Определяем шаблоны для страниц терминов таксономии на основании названия
  // термина
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'page__taxonomy__' . $vacabulary_id;
  }
  // Определяем шаблон для страницы цен
  if (\Drupal::routeMatch()->getRouteName() == 'price_page.price_page') {
    $suggestions[] = 'page__price_page';
  }
  // Определяем отдельный шаблон для страницы списка услуг
  if (\Drupal::routeMatch()->getRouteName() == 'view.services_page.page_1') {
    $suggestions[] = 'page__views__services_page';
  }
  // Определяем отдельные шаблон для страниц типов материалов
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

function fromTilda_theme_suggestions_taxonomy_term_alter(&$suggestions, &$vars, $hook) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    $suggestions[] = 'taxonomy_term__' . $vacabulary_id;
    if ($vacabulary_id == 'service') {
      // Получаем список вложенных услуг
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadChildren($term->id());
      $childTerms = array();
      foreach($terms as $childTerm) {
        $childTerms[] = array($childTerm->get('tid')->value,
          $childTerm->get('weight')->value);
      }

      // Сортируем вложенные услуги в порядке веса в словаре
      usort($childTerms, function($a, $b){
        return $a[1] <=> $b[1];
      });

      $childTermsTemp = array();
      foreach ($childTerms as &$childTerm) {
        $childTermsTemp[] = $childTerm[0];
      }

      $childTerms = implode(',', $childTermsTemp);

      // Получаем блок со вложенными услугами
      $view = \Drupal\views\Views::getView('sub_service');
      $view->setDisplay('block_1');
      $view->setArguments(array($childTerms));
      $render = $view->render();
      if (count($render['#rows']) > 0) {
        $vars['sub_services'] = \Drupal::service('renderer')->render($render);
      }

      // Получаем блок с ценами на услуги заболеваний
      $view = \Drupal\views\Views::getView('blok_cen_na_stranice_uslugi');
      $view->setDisplay('block_1');
      $view->setArguments(array($term->id()));
      $render = $view->render();
      if (count($render['#rows']) > 0) {
        $vars['service_price'] = \Drupal::service('renderer')->render($render);

        // Формируем якорь для ссылки на страницу прайса
        $service_type = $term->get('field_service_type')->getValue();
        if (isset($service_type[0]) && isset($service_type[0]['target_id'])) {
          $service_type = Term::load($service_type[0]['target_id']);
          $service_type_name = $service_type->name->value;
          $translitiration = new PhpTransliteration();
          $anchor = str_replace(' ', '_', $translitiration->transliterate($service_type_name, 'en', '_'));
          $vars['service_price_anchor'] = $anchor;
        }
      }
    }
  }
}

/**
 * Preprocess function for page*.html.twig.
 */
function fromTilda_preprocess_page(&$variables) {
  $defaultDoctor = false;
  if (($node = \Drupal::routeMatch()->getParameter('node')) &&
    $node->getType() == 'doktor'
  ) {
    $description = '';
    $specializations = $node->get('field_specialization')->getValue();
    $specializations = array_map(function ($v) {
      return $v['value'];
    }, $specializations);
    $description .= implode(', ', $specializations);
    if (!$node->get('field_experience_since_what_year')->isEmpty()) {
      $description .= ', клинический стаж с ';
      $description .= $node->get('field_experience_since_what_year')
        ->getValue()[0]['value'];
      $description .= ' года';
    }
    $description = trim($description);
    $descriptionParts = explode(' ', $description);
    $descriptionParts[0] = mb_convert_case($descriptionParts[0], MB_CASE_TITLE, 'UTF-8');
    $variables['doctorDescription']['#markup'] = implode(' ', $descriptionParts);
    $url = '';
    if (!$node->field_foto->isEmpty()) {
      $uri = $node->field_foto->entity->getFileUri();
      $url = file_create_url($uri);
    }
    $variables['doctorPhotoUrl']['#markup'] = $url;
    $defaultDoctor = $node->id();
    $variables['doctorName'] = $node->get('title')->getValue()[0]['value'];

    // На странице доктора нужен список всех клиник для формы отзыва
    $variables['clinics'] = [];
    $clinicNids = \Drupal::entityQuery('node')->condition('type','clinic')->execute();
    $clinicNodes =  \Drupal\node\Entity\Node::loadMultiple($clinicNids);
    foreach ($clinicNodes as $clinicNode) {
      $variables['clinics'][$clinicNode->id()] = $clinicNode->getTitle();
    }
  }

  // Если обращение идёт к странице услуги, то запоминаем тип услуги для
  // правильного отображения на форме записи на приём
  $defaultServiceForForm = false;
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $vacabulary_id = $term->getVocabularyId();
    if ($vacabulary_id == 'service') {
      $defaultServiceForForm = $term->get('field_service_type')->getValue();
      if ($defaultServiceForForm) {
        $defaultServiceForForm = Term::load($defaultServiceForForm[0]['target_id'])->name->value;
        $variables['defaultServiceForForm'] = $defaultServiceForForm;
      }
    }
  }

  // Получаем список всех докторов.
  // Попутно сохраняя список оказываемых доктором услуг.
  $nids = \Drupal::entityQuery('node')->condition('type','doktor')->execute();
  $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
  $variables['doctors'] = [];
  $serviceTypesAll = [];
  $defaulServiceType = [];
  foreach ($doctorsNodes as $node) {
    $serviceTypes = $node->get('field_service_type')->getValue();
    foreach ($serviceTypes as $serviceType) {
      $serviceTypeTerm = Term::load($serviceType['target_id']);
      if (($defaultServiceForForm && $defaultServiceForForm == $serviceTypeTerm->name->value) || ($defaultDoctor && $defaultDoctor == $node->id())) {
        $defaulServiceType[$serviceType['target_id']]['name'] = $serviceTypeTerm->name->value;
        $defaulServiceType[$serviceType['target_id']]['doctors'][]['name'] = $node->getTitle();
      } else {
        $serviceTypesAll[$serviceType['target_id']]['name'] = $serviceTypeTerm->name->value;
        $serviceTypesAll[$serviceType['target_id']]['doctors'][]['name'] = $node->getTitle();
      }
    }
    $variables['doctors'][$node->id()] = $node->getTitle();
  }
  if ($defaulServiceType) {
    foreach ($defaulServiceType as $key => &$defaulServiceTypeItem) {
      if (isset($serviceTypesAll[$key]['doctors'])) {
        $defaulServiceTypeItem['doctors'] = array_merge($defaulServiceTypeItem['doctors'], $serviceTypesAll[$key]['doctors']);
        unset($serviceTypesAll[$key]);
      }
    }
  }
  $variables['serviceTypesAll'] = array_merge($defaulServiceType, $serviceTypesAll);

  // Если обращаются к странице со списком клиник, то собираем информацию о центральной клинике
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id === 'clinics') {
    $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties(['field_central_clinic' => 1]);
    if ($nodes) {
      $variables['centralClinic'] = [];
      $node = current($nodes);
      $variables['centralClinic']['title'] = $node->getTitle();
      $variables['centralClinic']['metro'] = $node->get('field_metro')->getValue();

      $city = $node->get('field_city')->getValue();
      if ($city) {
        $cityTerm = Term::load($city[0]['target_id']);
        $variables['centralClinic']['city'] = $cityTerm->name->value;
      }

      $variables['centralClinic']['address'] = $node->get('field_address')->getValue();

      $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()]);
      $variables['centralClinic']['url'] = $url->toString();

      if (!$node->field_image->isEmpty()) {
        $uri = $node->field_image->entity->getFileUri();
        $variables['centralClinic']['img'] = file_create_url($uri);
      }
    }
  }
}

function fromTilda_preprocess_node(&$variables){
  if ($variables['node']->getType() == 'doktor') {
    // Распаковываем данные по графику работы для отображения на сайте
    $schedule = $variables['node']->get('field_schedule')->getValue();
    if (isset($schedule[0]['value']) && $schedule[0]['value']) {
      $schedule = json_decode($schedule[0]['value'], TRUE);
    }
    if ($schedule && is_array($schedule)) {
      array_walk($schedule, function(&$value) {
        array_walk($value, function(&$clinik, $key){
          if ($key != 'start' && $key != 'end' && $clinik) {
            // Составляем ссылки на страницы клиник
            $nodeClinic = \Drupal\node\Entity\Node::load($clinik);
            $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $nodeClinic->id()]);
            $clinik = ['name' => $nodeClinic->getTitle(), 'url' => $url->toString()];
          }
        });
      });
      $variables['schedule'] = $schedule;
    }
  }
}

function fromTilda_preprocess_views_view(&$variables){
  $view = $variables['view'];

  // Если обращаются к странице со списком докторов,
  // то собираем все специализации к которым был отнесён хотя бы один доктор,
  // а так же все клиники которые были указаны в графиках работы
  if ($view->storage->id() === 'doctors' && $view->current_display == 'page_1') {
    $nids = \Drupal::entityQuery('node')->condition('type','doktor')->execute();
    $doctorsNodes =  \Drupal\node\Entity\Node::loadMultiple($nids);
    $translitiration = new PhpTransliteration();
    $allSpecializations = [];
    $allClinics = [];
    foreach ($doctorsNodes as $node) {
      $specializations = $node->get('field_specialization')->getValue();
      foreach ($specializations as $specialization) {
        $key = str_replace(' ', '_', $translitiration->transliterate($specialization['value'], 'en', '_'));
        $allSpecializations[$key] = $specialization['value'];
      }
      $schedule = $node->get('field_schedule')->getValue();
      if (isset($schedule[0]['value']) && $schedule[0]['value']) {
        $schedule = json_decode($schedule[0]['value'], TRUE);
      }
      if ($schedule && is_array($schedule)) {
        array_walk($schedule, function(&$value) use($translitiration, &$allClinics) {
          array_walk($value, function(&$clinik, $key) use($translitiration, &$allClinics){
            if ($key != 'start' && $key != 'end' && $clinik) {
              // Составляем ссылки на страницы клиник
              $nodeClinic = \Drupal\node\Entity\Node::load($clinik);
              $name = $nodeClinic->getTitle();
              $clinicKey = str_replace(' ', '_', $translitiration->transliterate($name, 'en', '_'));
              $allClinics[$clinicKey] = $name;
            }
          });
        });
      }
    }
    $variables['allSpecializations'] = $allSpecializations;
    $variables['allClinics'] = $allClinics;
    $variables['getVars'] = $_GET;
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function fromTilda_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $pieces = [
    $variables['element']['#type'],
    $variables['element']['#name'],
    $variables['element']['#display_id'],
  ];
  $suggestions[] = 'container__' . implode('_', $pieces);
}
